package BookCode;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;

public class Parser extends Lexer
{
	
	public void run(String textDoc) 
	{
		try 
		{
			file = new File(textDoc);
			inputStream = new FileReader(file);
			
			getChar();
			lex();

			expr();

		} catch (FileNotFoundException e) 
		{
			e.printStackTrace();
		}

	}
	
	
	/* factor
	Parses strings in the language generated by the rule: <factor> -> id | int_constant | ( <expr )
	*/
	public void factor() 
	{
		System.out.println("    Enter <factor>");
		
		/* Determine which RHS */
		if (nextToken == IDENT || nextToken == INT_LIT)
		{
			/* Get the next token */
			lex();	
		}
		else 
		{
			/* If the RHS is ( <expr>), call lex to pass over the left parenthesis, call expr, and check for the right
			parenthesis */
			if (nextToken == LEFT_PAREN) 
			{
				lex();
				expr();
				
				if (nextToken == RIGHT_PAREN)
					lex();
				else
					error();
			} /* End of if (nextToken == ... */
			else
			{
				/* It was not an id, an integer literal, or a left parenthesis */
				error();
			}
		} /* End of else */
		
		System.out.println("    Exit <factor>");
	} /* End of function factor */
	
	
	/* expr
	Parses strings in the language generated by the rule: <expr> -> <term> {(+ | -) <term>}
	*/
	public void expr() 
	{
		System.out.println("Enter <expr>");
		
		/* Parse the first term */
		term();
		
		/* As long as the next token is + or -, get	the next token and parse the next term */
		while (nextToken == ADD_OP || nextToken == SUB_OP) 
		{
			lex();
			term();
		}
		
		System.out.println("Exit <expr>");
	} /* End of function expr */
	
	
	/* term
	Parses strings in the language generated by the rule: <term> -> <factor> {(* | /) <factor>)
	*/
	public void term() 
	{
		System.out.println("  Enter <term>");
		
		/* Parse the first factor */
		factor();
		
		/* As long as the next token is * or /, get the	next token and parse the next factor */
		while (nextToken == MULT_OP || nextToken == DIV_OP) 
		{
			lex();
			factor();
		}
		
		System.out.println("  Exit <term>");
	} /* End of function term */
	
	
	//Error message
	public void error()
	{
		System.out.println("There was an error. Please proceed "
				+ "to the nearest medical doctor for help on "
				+ "assesing you inabilities.");
	}

}
